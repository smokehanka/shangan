int main()
{
	int a[3][4] = { 0 };

	printf("%d\n", sizeof(a));//48 - 3*4个字符*4个字节
	printf("%d\n", sizeof(a[0][0]));//4 - 一个整型元素大小
	printf("%d\n", sizeof(a[0]));//16 - 单独计算a[0]这一行作为一维数组的数组名，计算的是第一行的大小
	printf("%d\n", sizeof(a[0]+1));//4 - a[0]没有单独放在sizeof内则表示第一行的首元素地址a[0]+1表示第一行第二个元素
	printf("%d\n", sizeof(*(a[0]+1)));//4 - 第一行第二个元素解引用就是第一行第二个元素
	printf("%d\n", sizeof(a+1));//4 - a是二维数组的数组名，数组名没有sizeof（数组名），也没有&（数组名），所以a是首元素地址
	//而二维数组的首元素是第一行，把二维数组看成一维数组时，a就是第一行（首元素）的地址 a+1就是第二行的地址
	printf("%d\n", sizeof(*(a+1)));//16 - 解引用第二行的地址等价于sizeof（a[1]），计算第二行的大小
	printf("%d\n", sizeof(&a[0]+1));//4 - 第二行的地址，&a[0]就相当于第一行的地址
	printf("%d\n", sizeof(*(&a[0]+1)));//16 - 解引用第二行地址
	printf("%d\n", sizeof(*a));//16 - a是首元素地址，第一行的地址，*a就是第一行，sizeof（*a）就是计算第一行的大小
	printf("%d\n", sizeof(a[3]));//16 - 越界但是相当于a[0]

	return 0;
}
