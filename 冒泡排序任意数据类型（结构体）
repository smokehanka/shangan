struct Stu
{
	char name[20];
	int age;
};
int cmp_stu_by_age(const void* a, const void* b)
{
	return ((struct Stu*)a)->age - ((struct Stu*)b)->age;
}
int cmp_stu_by_name(const void* a, const void* b)
{
	//比较名字就是比较字符串
	//字符串比较不能直接用><=来比较，应该用strcmp函数
	return strcmp(((struct Stu*)a)->name ,((struct Stu*)b)->name);
}
//交换函数(单字符交换）
void Swap(char* buf1, char* buf2,int width)
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
		buf1++;
		buf2++;
	}
}
//实现bubble_sort函数的程序员，他是否知道未来排序的数据类型-不知道
//那程序员也不知道，待比较的两个元素的类型
void Bubble_sort(void* base,int sz,int width ,int (*cmp)(void*e1,void*e2))
//width宽度（几个字节）
{
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int j = 0;
		for (j = 0; j <sz-1-i ; j++)
		{
		//前一个数和后一个数比较cmp比较方法base首元素，j*width宽度（字节）（j+1）*width访问下一个元素要跳过几个字节
			if (cmp((char*)base+j*width,(char*)base+(j+1)*width) > 0)
			{
				//交换
				Swap((char*)base + j * width, (char*)base + (j + 1) * width,width);
			}
		}
	}
}
test2()
{
	struct Stu s[3] = { {"C",20},{"B",30},{"A",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	//cmp_stu_by_age函数说明比较方法（参考qsort）
	Bubble_sort(s,sz,sizeof(s[0]),cmp_stu_by_age);
	
	printf("%d ", s[0].age);
	printf("%d ", s[1].age);
	printf("%d ", s[2].age);
	printf("\n");
}
test3()
{
	struct Stu s[3] = { {"C",20},{"B",30},{"A",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	Bubble_sort(s, sz, sizeof(s[0]), cmp_stu_by_name);
	printf("%s ", s[0].name);
	printf("%s ", s[1].name);
	printf("%s ", s[2].name);
}
int main()
{
	test2();
	test3();
	return 0;
}
